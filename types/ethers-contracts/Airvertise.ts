/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type AdCampaignStruct = {
  campaignAddress: PromiseOrValue<string>;
  pendingCollection: PromiseOrValue<boolean>;
};

export type AdCampaignStructOutput = [string, boolean] & {
  campaignAddress: string;
  pendingCollection: boolean;
};

export interface AirvertiseInterface extends utils.Interface {
  functions: {
    "advertisementExists(address)": FunctionFragment;
    "advertisements(uint256)": FunctionFragment;
    "campaignOwnerToCampaignAddresses(address,uint256)": FunctionFragment;
    "claimAirdrop(uint256,uint256)": FunctionFragment;
    "createCampaign(string,string,uint256,string,address[])": FunctionFragment;
    "getOwnerCampaignAddresses(address)": FunctionFragment;
    "getUserCampaignAddresses(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "predictAddress(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userToCampaignAddresses(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "advertisementExists"
      | "advertisements"
      | "campaignOwnerToCampaignAddresses"
      | "claimAirdrop"
      | "createCampaign"
      | "getOwnerCampaignAddresses"
      | "getUserCampaignAddresses"
      | "owner"
      | "predictAddress"
      | "renounceOwnership"
      | "setSigner"
      | "transferOwnership"
      | "userToCampaignAddresses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "advertisementExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "advertisements",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignOwnerToCampaignAddresses",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAirdrop",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerCampaignAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCampaignAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predictAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userToCampaignAddresses",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "advertisementExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advertisements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignOwnerToCampaignAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerCampaignAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCampaignAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToCampaignAddresses",
    data: BytesLike
  ): Result;

  events: {
    "AirdropClaimed(address,address,uint256)": EventFragment;
    "CampaignCreated(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AirdropClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AirdropClaimedEventObject {
  user: string;
  campaignAddress: string;
  tokenId: BigNumber;
}
export type AirdropClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  AirdropClaimedEventObject
>;

export type AirdropClaimedEventFilter = TypedEventFilter<AirdropClaimedEvent>;

export interface CampaignCreatedEventObject {
  campaignAddress: string;
  campaignsCount: BigNumber;
}
export type CampaignCreatedEvent = TypedEvent<
  [string, BigNumber],
  CampaignCreatedEventObject
>;

export type CampaignCreatedEventFilter = TypedEventFilter<CampaignCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Airvertise extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AirvertiseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    advertisementExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    advertisements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    campaignOwnerToCampaignAddresses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claimAirdrop(
      _campaignAddressIndex: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCampaign(
      _campaignTitle: PromiseOrValue<string>,
      _campaignName: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _advertisementUri: PromiseOrValue<string>,
      _to: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOwnerCampaignAddresses(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { campaigns: string[] }>;

    getUserCampaignAddresses(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [AdCampaignStructOutput[]] & { campaigns: AdCampaignStructOutput[] }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    predictAddress(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userToCampaignAddresses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & {
        campaignAddress: string;
        pendingCollection: boolean;
      }
    >;
  };

  advertisementExists(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  advertisements(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  campaignOwnerToCampaignAddresses(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  claimAirdrop(
    _campaignAddressIndex: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCampaign(
    _campaignTitle: PromiseOrValue<string>,
    _campaignName: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _advertisementUri: PromiseOrValue<string>,
    _to: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOwnerCampaignAddresses(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUserCampaignAddresses(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AdCampaignStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  predictAddress(
    _salt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    _signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userToCampaignAddresses(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean] & { campaignAddress: string; pendingCollection: boolean }
  >;

  callStatic: {
    advertisementExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    advertisements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    campaignOwnerToCampaignAddresses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    claimAirdrop(
      _campaignAddressIndex: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createCampaign(
      _campaignTitle: PromiseOrValue<string>,
      _campaignName: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _advertisementUri: PromiseOrValue<string>,
      _to: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string>;

    getOwnerCampaignAddresses(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUserCampaignAddresses(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AdCampaignStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    predictAddress(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userToCampaignAddresses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & {
        campaignAddress: string;
        pendingCollection: boolean;
      }
    >;
  };

  filters: {
    "AirdropClaimed(address,address,uint256)"(
      user?: null,
      campaignAddress?: null,
      tokenId?: null
    ): AirdropClaimedEventFilter;
    AirdropClaimed(
      user?: null,
      campaignAddress?: null,
      tokenId?: null
    ): AirdropClaimedEventFilter;

    "CampaignCreated(address,uint256)"(
      campaignAddress?: null,
      campaignsCount?: null
    ): CampaignCreatedEventFilter;
    CampaignCreated(
      campaignAddress?: null,
      campaignsCount?: null
    ): CampaignCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    advertisementExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    advertisements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignOwnerToCampaignAddresses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAirdrop(
      _campaignAddressIndex: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCampaign(
      _campaignTitle: PromiseOrValue<string>,
      _campaignName: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _advertisementUri: PromiseOrValue<string>,
      _to: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOwnerCampaignAddresses(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCampaignAddresses(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    predictAddress(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userToCampaignAddresses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    advertisementExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    advertisements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignOwnerToCampaignAddresses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAirdrop(
      _campaignAddressIndex: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCampaign(
      _campaignTitle: PromiseOrValue<string>,
      _campaignName: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _advertisementUri: PromiseOrValue<string>,
      _to: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOwnerCampaignAddresses(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserCampaignAddresses(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predictAddress(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userToCampaignAddresses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
